/**
 * Author: sascha_lammers@gmx.de
 */

$.__prototypes = {
    dismissible_alert: '<div><div class="alert alert-dismissible fade show" role="alert"><h4 class="alert-heading"></h4><span></span><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button></div></div>',
    filemanager_upload_progress: '<p class="text-center">Uploading <span id="upload_percent"></span>...<div class="progress"><div class="progress-bar progress-bar-striped progress-bar-animated text-center" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="10000" style="width:0%;" id="upload_progress"></div></div></p>',
};

function config_init(show_ids, update_form) {
    if (update_form === true) {
         $('input,select').addClass('setting-requires-restart');
    }
    if (show_ids !== undefined && show_ids !== null && show_ids.indexOf('%') === -1) {
        $(show_ids).show();
    }
    $('body')[0].onload = null;
}

function pop_error_clear(_target) {
    if (!_target) {
        _target = $('.container:first');
    }
    _target.find('.alert-dismissible').remove();
}

function pop_error(error_type, title, message, _target, clear) {
	var id = "#alert-" + random_str();
    var $html = $($.__prototypes.dismissible_alert);
    $html.find('div').addClass('alert-' + error_type).attr('id', id.substr(1));
    $html.find('h4').html(title);
    $html.find('span:first').html(message);
    if (!_target) {
        _target = $('.container:first');
    }
    if (clear) {
        pop_error_clear(_target);
    }
    _target.prepend('<div class="row"><div class="col">' + $html.html() + '</div></div>');
    $html.on('closed.bs.alert', function () {
        $(this).closest('div').remove();
    });
    $html.alert();
}

function form_invalid_feedback(selector, message) {
    $(selector).addClass('is-invalid');
    $(selector).parent().find(".invalid-feedback").remove();
    $(selector).parent().append('<div class="invalid-feedback">' + message + '</div>');
}

function random_str() {
    return Math.random().toString(36).substring(7);
}

$.getSessionId = function() {
    try {
        return Cookies.get("SID");
    } catch(e) {
        return '';
    }
}

$.getHttpLocation = function(uri) {
    var url = window.location.protocol == 'http:' ? 'http://' + window.location.host : 'https://' + window.location.host;
    return url + (uri ? uri : '');
}

$.getWebSocketLocation = function(uri) {
    var hasPort = window.location.host.indexOf(':') != -1;
    var url =  window.location.protocol == 'http:' ? 'ws://' + window.location.host + (hasPort ? '' : ':80') : 'wss://' + window.location.host + (hasPort ? '' : ':443');
    return url + (uri ? uri : '');
}

$.visible_password_options = {};

$.formValidator = {
    name: 'form:last',
    errors: [],
    validated: false,
    markAsValid: false,
    addErrors: function(errors, target) {
        $.formValidator.errors = errors;
        $.formValidator.validated = true;
        if (target) {
            $.formValidator.form = target;
        }
    }
};

$.urlParam = function(name, remove) {
    var results = new RegExp('([\?&])' + name + '=([^&#]*)([&#]?)').exec(window.location.href);
    if (results == null) {
       return null;
    }
    if (remove) {
        var str = name + '=' + results[2];
        if (results[3] == '&') {
            if (results[1] == '?' || results[1] == '&') {
                str += '&';
            }
        }
        if (results[1] == '&' && results[3] == '#') {
            str = '&' + str;
        }
        str = window.location.href.replace(str, '');
        try {
            history.pushState({}, null, str);
        } catch(e) {
            console.log(e);
            console.log(str);
        }
    }
    return decodeURI(results[2]) || 0;
}

$(function() {

    // execute first
    if ($('body')[0].onload) {
        $('body')[0].onload();
        $('body')[0].onload = null;
    }

    try {
        var message;
        if (message = $.urlParam('_message', true)) {
            pop_error($.urlParam('_type', true) || 'danger', $.urlParam('_title', true) || 'ERROR!', message, null, true);
        }
    } catch(e) {
        console.log(e);
    }

    // all forms
    $('.setting-requires-restart').change(function(e) {
        var $this = $(this);
        var id = "#alert-for-" + $this.attr('id');
        if ($this.attr('type') != 'hidden' && $this.val() != this.defaultValue && $(id).length === 0) {
            var label = $('label[for="' + $this.attr('id') + '"]').html();
            if (!label) {
                label = $this.data('label');
            }
            var $html = $($.__prototypes.dismissible_alert);
            $html.find('div').addClass('alert-warning').attr('id', id.substr(1));
            $html.find('h4').html("WARNING!");
            $html.find('span:first').html("Changing <strong>" + label.replace(":", "") + "</strong> requires a restart...");
            $(this).closest("form").prepend('<div class="form-group">' + $html.html() + '</div>');
            $html.on('closed.bs.alert', function () {
                $(this).closest('div').remove();
            });
            $html.alert();
        } else if ($(id).length !== 0) {
            $(id).alert('close');
        }
    });

    $.visible_password_options = $.extend({
        disabled: false,
        always_visible: false,
        protected: 'auto',
        icon_protected: 'oi-eye',
        icon_unprotected: 'oi-shield',
    }, $.visible_password_options);

    $('.visible-password').each(function() {

        var options = $.visible_password_options;
        var $wrappedElement = $(this).wrap('<div class="input-group visible-password-group"></div>');

        $.each( options, function( key, value ) {
            var val = $wrappedElement.data(key.replace('_', '-'));
            if (val !== undefined) {
                options[key] = val;
            }
        });

        if (options.disabled) {
            return;
        }

        var $button, $span;
        function is_password() {
            return $wrappedElement.attr('type') == 'password';
        }
        function is_protected() {
            return $button.data('protected') != '0';
        }
        function set_type(type) {
            $wrappedElement.attr('type', type);
        }
        function update_icon() {
            if ((!options.always_visible && is_protected()) || (options.always_visible && is_password())) {
                $span.removeClass(options.icon_unprotected).addClass(options.icon_protected); // protected
            } else {
                $span.addClass(options.icon_unprotected).removeClass(options.icon_protected); // visible/unprotected
            }
        }

        var $newElement = $('<div class="input-group-append"><button class="btn btn-default btn-visible-password" type="button" data-protected="' + (is_password() || options.protected === true || (options.always_visible && options.protected === 'auto') ? '1' : '0') + '"><span class="oi"></span></button>');
        $button = $newElement.find('button');
        $span = $button.find('span');
        $wrappedElement
            .attr('autocomplete', 'new-password')
            .attr('spellcheck', 'false')
            .after($newElement)

        if (!options.always_visible || options.protected === true || (options.always_visible && options.protected === 'auto')) {
            set_type('password');
        }
        update_icon();

        $button.on('click', function(e) {
            e.preventDefault();
            $button.data('protected', is_protected() ? '0' : '1');
            if (options.always_visible) {
                set_type(is_protected() ? 'password' : 'text');
            }
            update_icon();
        });
        if (!options.always_visible) {
            $wrappedElement.on('focus', function() {
                if (!is_protected()) {
                    set_type('text');
                }
            })
            .on('blur', function() {
                set_type('password');
            });
        }

    });

    // https://bootsnipp.com/snippets/featured/jquery-checkbox-buttons
    $('.button-checkbox').each(function () {

        // Settings
        var $widget = $(this),
            $button = $widget.find('button'),
            $checkbox = $widget.find('input:checkbox'),
            color = $button.data('color'),
            settings = {
                on: {
                    icon: 'oi oi-task'
                },
                off: {
                    icon: 'oi oi-ban'
                }
            };

        // Event Handlers
        $button.on('click', function () {
            $checkbox.prop('checked', !$checkbox.is(':checked'));
            $checkbox.triggerHandler('change');
            updateDisplay();
        });
        $checkbox.on('change', function () {
            updateDisplay();
        });

        // Actions
        function updateDisplay() {
            var isChecked = $checkbox.is(':checked');

            // Set the button's state
            $button.data('state', (isChecked) ? "on" : "off");

            // Set the button's icon
            $button.find('.state-icon')
                .removeClass()
                .addClass('state-icon ' + settings[$button.data('state')].icon);

            // Update the button's color
            if (isChecked) {
                $button
                    .removeClass('btn-default')
                    .addClass('btn-' + color + ' active');
            }
            else {
                $button
                    .removeClass('btn-' + color + ' active')
                    .addClass('btn-default');
            }
        }

        // Initialization
        function init() {
            updateDisplay();
            // Inject the icon if applicable
            if ($button.find('.state-icon').length == 0) {
                $button.prepend('<i class="state-icon ' + settings[$button.data('state')].icon + '"></i>Â ');
            }
        }
        init();
    });

   // wifi.html
    if ($('#wifi_settings').length) {
        $('#channel option').each(function() {
            if (parseInt($(this).val()) > '/%%%MAX_CHANNELS%%%/') {
                $(this).remove();
            }
        });
        function mode_change() {
            var mode = parseInt($('#mode').val());
            $('#station_mode').hide();
            $('#ap_mode').hide();
            if (mode == 1 || mode == 3) {
                $('#station_mode').show();
            }
            if (mode == 2 || mode == 3) {
                $('#ap_mode').show();
            }
        }
        $('#mode').change(mode_change);
        mode_change();
        $('form').on('submit', function() {
            $('#ap_hidden').val($('#_ap_hidden').prop('checked') ? '1' : '0');
        });
        $('#network_dialog').on('show.bs.modal', function (event) {
            console.log("show.bs.modal");
            var SID = $.getSessionId();
            var modal = $(this)
            var reload_timer = null;
            var selected_network = $('#ssid').val();
            modal.find('.btn-primary').prop('disabled', true);
            modal.find('.modal-body .networks').hide();
            modal.find('.modal-body .scanning').show();
            function scan_failed(jqXHR, textStatus, error) {
                modal.find('.btn-primary').prop('disabled', true);
                modal.find('.modal-body .scanning').hide();
                modal.find('.modal-body .networks').html("An error occured!<br>" + error).show();
            }
            function auto_reload() {
                $('#wifi_networks_title').html('<img src="images/spinner.gif" width="24" height="24" border="0">');
                check_scan();
            }
            function check_scan() {
                $.get('/scan_wifi/?SID=' + SID + '&id=' + random_str(), function(data) {
                    console.log(data);
                    if (data.pending) {
                        window.setTimeout(check_scan, 1000);
                    } else {
                        var header = '<table class=\"table table-striped\"><thead class=\"thead-light\"><tr><th>SSID</th><th>Channel</th><th>Signal</th><th>MAC</th><th>Encryption</th></tr></thead><tbody>';
                        var footer = '</tbody></table>';
                        $('#wifi_networks_title').html('<a href="#" id="reload_link"><span class="oi oi-reload" title="Reload" aria-hidden="true"></span></a>');
                        $('#reload_link').on("click", function(e) {
                            e.preventDefault();
                            if (reload_timer != null) {
                                window.clearTimeout(reload_timer);
                                reload_timer = null;
                            }
                            modal.find('tr').removeClass("bg-primary").find('td').removeClass('text-white');
                            modal.find('.btn-primary').prop('disabled', true);
                            auto_reload();
                        });
                        var html = header;
                        if (data.msg) {
                            html += '<tr scope="row"><td colspan="99" class="text-center">' + data.msg + '</td></tr>';
                        } else {
                            data.result.sort(function(a, b) {
                                return b.rssi - a.rssi;
                            });
                            for(var i = 0; i < data.result.length; i++) {
                                var r = data.result[i];
                                html += '<tr scope="row" class="' + r.tr_class + '">';
                                if (r.td_class) {
                                    html += '<td class="' + r.td_class + '">';
                                } else {
                                    html += '<td>';
                                }
                                html += r.channel;
                                html += "</td><td>";
                                html += r.rssi;
                                html += "</td><td>";
                                html += r.rssi;
                                html += "</td><td>";
                                html += r.bssid;
                                html += "</td><td>";
                                html += r.encryption;
                                html += "</td></tr>";
                            }
                        }
                        html += footer;
                        modal.find('.modal-body .scanning').hide();
                        modal.find('.modal-body .networks').html(html).show();
                        modal.find('.network-name').each(function() {
                            if (selected_network != '' && selected_network == $(this).html()) {
                                $(this).closest('tr').addClass('bg-primary').find('td').addClass('text-white');
                            }
                        });
                        modal.find('.has-network-name').on("click", function(e) {
                            e.preventDefault();
                            if (reload_timer != null) {
                                window.clearTimeout(reload_timer);
                                reload_timer = null;
                            }
                            modal.find('tr').removeClass("bg-primary").find('td').removeClass('text-white');
                            selected_network = $(this).find('.network-name').html();
                            $(this).addClass('bg-primary').find('td').addClass('text-white');
                            modal.find('.btn-primary').prop('disabled', false).off("click").on("click", function(e) {
                                e.preventDefault();
                                modal.off('hidden.bs.modal').on('hidden.bs.modal', function() {
                                    window.clearTimeout(reload_timer);
                                    reload_timer = null;
                                    if (selected_network) {
                                        $('#ssid').val(selected_network);
                                        $('#password').focus().select();
                                    }
                                    selected_network = $('#ssid').val();
                                });
                                modal.modal('hide');
                            });
                        });
                        reload_timer = window.setTimeout(auto_reload, 30000);
                    }
                }, 'json').fail(scan_failed);
            }
            check_scan();
        });
    }

    // syslog.html
    if ($('#syslog_settings').length) {
        function syslog_change() {
            if ($('#syslog_enabled').val() != "0") {
                $('#syslog_settings').show();
            } else {
                $('#syslog_settings').hide();
            }
        }
        $('#syslog_enabled').change(syslog_change);
        syslog_change();
    }

    // ntp.html
    if ($('#ntp_settings').length) {
        function ntp_change() {
            if ($('#ntp_enabled').val() == "1") {
                $('#ntp_settings').show();
            } else {
                $('#ntp_settings').hide();
            }
        }
        $('#ntp_enabled').change(ntp_change);
        ntp_change();
    }

    // mqtt.html
    if ($('#mqtt_settings').length) {
        function mqtt_change() {
            var port = parseInt($('#mqtt_port').val());
            if ($('#mqtt_enabled').val() == "1") {
                $('#mqtt_port').attr('placeholder', '1883');
                if (port == 1883) {
                    $('#mqtt_port').val('');
                }
                $('#mqtt_settings').show();
            } else if ($('#mqtt_enabled').val() == "2") {
                $('#mqtt_port').val('placeholder', '8883');
                if (port == 8883) {
                    $('#mqtt_port').val('');
                }
                $('#mqtt_settings').show();
            } else {
                $('#mqtt_settings').hide();
            }
        }
        function mqtt_auto_discovery_change() {
            if ($('#mqtt_auto_discovery').val() == "1") {
                $('#mqtt_discovery').show()
            } else {
                $('#mqtt_discovery').hide()
            }
        }
        $('#mqtt_enabled').change(mqtt_change);
        mqtt_change();
        $('#mqtt_auto_discovery').change(mqtt_auto_discovery_change);
        mqtt_auto_discovery_change();
    }

    // network.html
    if ($('#network_settings').length) {
        function dhcp_change() {
            if ($('#dhcp_client').val() == "1") {
                $('#static_address').hide();
            } else {
                $('#static_address').show();
            }
        }
        $('#dhcp_client').change(dhcp_change);
        function dhcpd_change() {
            if ($('#softap_dhcpd').val() == "1") {
                $('#soft_ap_dhcpd').show();
            } else {
                $('#soft_ap_dhcpd').hide();
            }
        }
        $('#softap_dhcpd').change(dhcpd_change);
        dhcp_change();
        dhcpd_change();
    }

    // remote.html
    if ($('#remote_settings').length) {
        function http_enabled_changed() {
            var port = parseInt($('#http_port').val());
            var type = parseInt($('#http_enabled').val());
            if (type == 1) {
                $('#http_port').attr('placeholder', '80');
                if (port == 443 || port == 80) {
                    $('#http_port').val('');
                }
            } else if (type == 2) {
                $('#http_port').attr('placeholder', '443');
                if (port == 80 || port == 443) {
                    $('#http_port').val('');
                }
            }
        }
        $('#http_enabled').change(http_enabled_changed);
        $('#http_port').change(http_enabled_changed);
        http_enabled_changed();
    }

    // hue.html

    if ($('#hue_settings').length) {
        var hueNextId = 0;
        function hue_enabled_changed() {
            if ($('#hue_enabled').val() == '1') {
                $('#hue_settings').show();
            } else {
                $('#hue_settings').hide();
            }
        }
        function hue_enumerate_labels() {
            var num = 1;
            $('#hue_devices').find('label').each(function() {
                $(this).html($(this).html().replace(/[\d]+:/, num + ':'));
                num++;
            });
        }
        function hue_add_device(name) {
            var element = $(prototype.replace(/\$ID\$/g, hueNextId).replace(/\$NAME\$/g, name).replace(/\$NUM\$/, ++hueNextId));
            $('#hue_devices').append(element).find('button').on('click', function() {
                $(this).closest('.form-group').remove();
                hue_enumerate_labels();
            });
        }
        var prototype = $('#hue_device_prototype').html();
        for (var i = 0; i < window.hueDevices.length; i++) {
            hue_add_device(window.hueDevices[i]);
        }
        $('#hue_enabled').change(hue_enabled_changed);
        hue_enabled_changed();
        $('#add_device').on('click', function() {
            hue_add_device('');
            hue_enumerate_labels();
        });
    }

    // wemo.html

    if ($('#wemo_settings').length) {
        var wemoNextId = 0;
        function wemo_enabled_changed() {
            if ($('#wemo_enabled').val() == '1') {
                $('#wemo_settings').show();
            } else {
                $('#wemo_settings').hide();
            }
        }
        function wemo_enumerate_labels() {
            var num = 1;
            $('#wemo_devices').find('label').each(function() {
                $(this).html($(this).html().replace(/[\d]+:/, num + ':'));
                num++;
            });
        }
        function wemo_add_device(name) {
            var element = $(prototype.replace(/\$ID\$/g, wemoNextId).replace(/\$NAME\$/g, name).replace(/\$NUM\$/, ++wemoNextId));
            $('#wemo_devices').append(element).find('button').on('click', function() {
                $(this).closest('.form-group').remove();
                wemo_enumerate_labels();
            });
        }
        var prototype = $('#wemo_device_prototype').html();
        for (var i = 0; i < window.wemoDevices.length; i++) {
            wemo_add_device(window.wemoDevices[i]);
        }
        $('#wemo_enabled').change(wemo_enabled_changed);
        wemo_enabled_changed();
        $('#add_device').on('click', function() {
            wemo_add_device('');
            wemo_enumerate_labels();
        });
    }

    // serial2tcp.html
    if ($('#serial2tcp_settings').length) {
        function serial2tcp_enabled_changed() {
            if ($('#serial2tcp_enabled').val() == "1") {
                $('.serial2tcp_client_settings').hide();
                $('.serial2tcp_server_settings').show();
            } else if ($('#serial2tcp_enabled').val() == "2") {
                $('.serial2tcp_client_settings').hide();
                $('.serial2tcp_server_settings').show();
            } else if ($('#serial2tcp_enabled').val() == "3") {
                $('.serial2tcp_server_settings').hide();
                $('.serial2tcp_client_settings').show();
            } else if ($('#serial2tcp_enabled').val() == "4") {
                $('.serial2tcp_server_settings').hide();
                $('.serial2tcp_client_settings').show();
            } else {
                $('.serial2tcp_settings').hide();
                $('.serial2tcp_server_settings').hide();
                $('.serial2tcp_client_settings').hide();
            }
            serial2tcp_port_changed();
            serial2tcp_auth_mode_changed();
        }
        function serial2tcp_port_changed() {
            if ($('#serial2tcp_serial_port').val() == "0") {
                $('.serial2tcp_custom').hide();
            } else if ($('#serial2tcp_serial_port').val() == "1") {
                $('.serial2tcp_custom').hide();
            } else if ($('#serial2tcp_serial_port').val() == "2") {
                $('.serial2tcp_custom').show();
            }
        }
        function serial2tcp_auth_mode_changed() {
            if ($('#serial2tcp_auth').val() == "0") {
                $('.serial2tcp_authentication').hide();
            } else if ($('#serial2tcp_auth').val() == "1") {
                $('.serial2tcp_authentication').show();
            }
        }
        $('#serial2tcp_enabled').change(serial2tcp_enabled_changed);
        $('#serial2tcp_serial_port').change(serial2tcp_port_changed);
        $('#serial2tcp_auth').change(serial2tcp_auth_mode_changed);
        serial2tcp_enabled_changed();
        serial2tcp_port_changed();
        serial2tcp_auth_mode_changed();
        $('form').on('submit', function() {
            $('#serial2tcp_auto_connect').val($('#_serial2tcp_auto_connect').prop('checked') ? '1' : '0');
            $('#serial2tcp_auto_reconnect').val($('#_serial2tcp_auto_reconnect').prop('checked') ? '1' : '0');
        });

    }

    // rebooting.html
	if ($('#rebooting_device').length) {
		function checkIfAvailable() {
			$.get('/is_alive?p=' + Math.floor(Math.random() * 100000), function() {
				window.location = '/index.html';
			});
		}
		$.ajaxSetup({
            error: function(x, e) {
				window.setTimeout(checkIfAvailable, 1000);
            }
        });
		window.setTimeout(checkIfAvailable, 3000);
    }

    // file_manager.html
    if ($('#file_manager').length) {
        var currentDirectory = "/";
        var url = $.getHttpLocation("/file_manager/");
        var defaultParams = '?SID=' + $.getSessionId();

        function replace_vars(prototype, attrib, link, fullname, name, modified, size) {
            var _class;
            if (size === undefined) {
                link = '#' + decodeURI(link);
                _class = "dir";
            } else {
                link = url + "download?filename=" + link;
                _class = "file";
            }
            if (attrib == 2) {
                _class += " text-danger";
            } else if (attrib == 1) {
                _class += " text-secondary";
            }
            var html = prototype.
                replace(new RegExp("\\${CLASS}", "g"), _class).
                replace(new RegExp("\\${LINK}", "g"), link).
                replace(new RegExp("\\${FULLNAME}", "g"), fullname).
                replace(new RegExp("\\${FILENAME}", "g"), name).
                replace(new RegExp("\\${MODIFIED}", "g"), modified);
            if (size !== undefined) {
                return html.replace(new RegExp("\\${SIZE}", "g"), size);
            }
            if (name == "." || name == "..") {
                html = '<tr scope="row"><td>&nbsp;' + html.substring(html.indexOf('</td>'));
            }
            return html;
        }

        function split_dir(dir) {
            var parts = dir.split(/\/([^\/]+)/).filter(function(element, index) {
                return !(element == '' | (element == '/' && index > 0));
            });
            if (parts[0] != '/') {
                parts.unshift('/');
            }
            return parts;
        }

        function refresh_files(dir) {

            if (dir !== undefined) {
                currentDirectory = dir;
                if (currentDirectory === "") {
                    currentDirectory = "/";
                }
            }

            $('#files').hide();
            $('#spinner').show();
            $.get(url + "list" + defaultParams + "&dir=" + currentDirectory, function (data) {
                var dirs_prototype = $("#dirs_prototype").html();
                var files_prototype = $("#files_prototype").html();
                var dirs_ro_prototype = $("#dirs_ro_prototype").html();
                var files_ro_prototype = $("#files_ro_prototype").html();
                var html = '<li><a href="#" class="dir refresh-files breadcrumb-brand"><span class="oi oi-reload" title="Reload" aria-hidden="true"></span></a></li><span>&nbsp;&nbsp;&nbsp;&nbsp;</span>';
                $('#total_size').html(data.total);
                $('#total_size').attr('title', data.total_b);
                $('#used_space').html(data.used + " (" + data.usage + ")");
                $('#used_space').attr('title', data.used_b);
                currentDirectory = data.dir;
                var parts = split_dir(data.dir);
                var dir = '';
                for (var i = 0; i < parts.length; i++) {
                    if (i > 1) {
                        dir += '/';
                    }
                    dir += parts[i];
                    display = i ? parts[i] :'<span class="oi oi-home" title="/" aria-hidden="true"></span>';
                    if (i == parts.length - 1) {
                        html += '<li class="breadcrumb-item active" aria-current="page"">' + display + '</li>';
                    } else {
                        html += '<li class="breadcrumb-item"><a href="#' + dir + '" class="dir">' + display + '</a></li>';
                    }
                }
                $('nav .breadcrumb').html(html);

                html = replace_vars(dirs_prototype, 3, encodeURI(currentDirectory), "", ".", "N/A");
                var pos = currentDirectory.lastIndexOf('/');
                if (pos !== -1) {
                    var dir = currentDirectory.substring(0, pos);
                    if (dir === "") {
                        dir = "/";
                    }
                    html += replace_vars(dirs_prototype, 0, encodeURI(dir), "", "..", "N/A");
                }

                data.files.sort(function(a, b) {
                    if (a.f < b.f) {
                        return -1;
                    } else if (a.f > b.f) {
                        return 1;
                    }
                    return 0;
                });

                var files_html = '';
                for (var i = 0; i < data.files.length; i++) {
                    var t = data.files[i];
                    if (data.files[i].d) {
                        html += replace_vars(t.m ? dirs_ro_prototype : dirs_prototype, t.m, t.f, t.f, t.n, t.t ? t.t : "N/A")
                    } else {
                        files_html += replace_vars(t.m ? files_ro_prototype : files_prototype, t.m, t.f, t.f, t.n, t.t ? t.t : "N/A", t.s)
                    }
                }
                html += files_html;
                $('#spinner').hide();
                $('#files').html(html).show();
                $('.refresh-files').attr('href', '#' + currentDirectory);

                $('a.dir').off('click').on('click', function (e) {
                    refresh_files(decodeURI(e.currentTarget.hash.substring(1)));
                });

            }).fail(function (jqXHR, textStatus, error) {
                pop_error('danger', 'ERROR!', error, null, true);
            });
        }

        function add_feedback(dialog, message) {
            pop_error_clear($(dialog));
            var selector = $(dialog + ' .modal-body').find('input[type=text]');
            if (selector.length) {
                form_invalid_feedback(selector, message);
            } else {
                pop_error('danger', 'ERROR!', message, $(dialog + ' .modal-body'));
            }
            $(dialog).find('button').prop('disabled', false);
        }

        function ajax_request(url, dialog) {
            $.get(url, function (data) {
                if (data.substring(0, 6) === "ERROR:") {
                    add_feedback(dialog, data.substring(6));
                } else {
                    $(dialog).modal('hide');
                    refresh_files();
                }
            }).fail(function (jqXHR, textStatus, error) {
                add_feedback(dialog, error)
            });
        }

        function cleanup_dialog(dialog) {
            pop_error_clear(dialog);
            dialog.find('.is-invalid').removeClass('is-invalid');
            dialog.find('.invalid-feedback').remove();
            dialog.find('button').prop('disabled', false);
        }

        function mkdir(dir) {
            ajax_request(url + "mkdir" + defaultParams + "&dir=" + currentDirectory + "&new_dir=" + dir, '#mkdir_dialog');
        }

        function remove(filename, type) {
            ajax_request(url + "remove" + defaultParams + "&dir=" + currentDirectory + "&filename=" + filename + "&type=" + type, '#remove_dialog');
        }

        function rename(old_name, new_name, type) {
            ajax_request(url + "rename" + defaultParams + "&dir=" + currentDirectory + "&filename=" + old_name + "&to=" + encodeURI(new_name) + "&type=" + type, '#rename_dialog');
        }

        $('#mkdir_dialog').on("show.bs.modal", function (e) {
            cleanup_dialog($('#mkdir_dialog'));
            $('#new_dir').val('');
        }).on('shown.bs.modal', function (e) {
            $('#new_dir').focus();
        });

        $('#upload_dialog').on("show.bs.modal", function (e) {
            cleanup_dialog($('#upload_dialog'));
            $('#upload_filename').val('').attr('placeholder', '');
            $('#upload_file').val('');
            $('#upload_status').hide();
            $('#upload_form').show();
            $('#upload_form').off('submit').on('submit', function(e) {
                $('#upload_current_dir').val(currentDirectory);
                if ($('#upload_filename').val() == "") {
                    $('#upload_filename').val($('#upload_filename').attr('placeholder'));
                }
                $('#upload_dialog').find('button').prop('disabled', true);
                try {
                    var formData = new FormData();
                    formData.append("upload_filename", $('#upload_filename').val());
                    formData.append("upload_file",  $('#upload_file')[0].files[0]);
                    formData.append("ajax_upload", "1");
                    formData.append("upload_current_dir", currentDirectory);

                    var request = new XMLHttpRequest();
                    request.open("POST", $.getHttpLocation('/file_manager/upload') + defaultParams + '&id=' + random_str(), true);

                    var upload_status = $('#upload_status');
                    upload_status.show().html($.__prototypes.filemanager_upload_progress);

                    $('#upload_form').hide();
                    request.onload = function(e) {
                        if (request.status == 200) {
                            refresh_files(currentDirectory);
                            upload_status.html('<p class="text-center"><button type="button" class="btn btn-primary" data-dismiss="modal">Upload complete</button></p>');
                        } else {
                            $('#upload_form').show();
                            upload_status.hide();
                            console.log(request);
                            pop_error('danger', 'ERROR ' + request.status, request.responseText ? request.responseText : request.response, $('#upload_dialog .modal-body'), true);
                        }
                        $('#upload_dialog').find('button').prop('disabled', false);
                    };
                    var fake_position = 0;
                    function start_fake_progress() {
                        if (fake_position == 0) {
                            fake_position = 1;
                            var next_step = 20;
                            function fake_progress() {
                                fake_position += next_step;
                                if (next_step > 1) {
                                    next_step -= 0.01;
                                }
                                if (fake_position > 10000) {
                                    fake_position = 1;
                                    next_step = 20;
                                }
                                $('#upload_progress').attr('aria-valuenow', Math.ceil(fake_position)).css('width', Math.ceil(fake_position / 10000 * 100) + '%');
                                window.setTimeout(fake_progress, 250);
                            }
                            window.setTimeout(fake_progress, 250);
                        }
                    }
                    request.upload.onprogress = function(e) {
                        var position = e.loaded || e.position;
                        if (e.lengthComputable) {
                            var percent = Math.ceil(position / e.total * 1000);
                            $('#upload_percent').html((percent / 10) + "%");
                            $('#upload_progress').attr('aria-valuemax', e.total).attr('aria-valuenow', position);
                        } else {
                            start_fake_progress();
                        }
                    };
                    request.send(formData);

                    e.preventDefault();

                } catch(exception) {
                    // ajax upload might not be supposed, just submit the form
                }
            });
        }).on('shown.bs.modal', function (e) {
            $('#upload_filename').focus();
        });

        $('#upload_file').on('change', function (e) {
            var filename = $(this).val();
            console.log(filename);
            var pos = filename.replace(/\\/g, '/').lastIndexOf('/');
            if (pos != -1) {
                filename = filename.substring(pos + 1);
            }
            filename = filename.substring(0, 31 - currentDirectory.length - 1);
            $('#upload_filename').attr('placeholder', filename).focus();
        });

        $(window).on('popstate', function (e) {
            e.preventDefault();
            refresh_files(window.location.hash.substring(1));
        });

        $('#remove_dialog').on("show.bs.modal", function (e) {
            var target = $(e.relatedTarget);
            cleanup_dialog($('#remove_dialog'));
            $('#remove_dialog').find('p').html("Delete <strong>" + target.data("name") + "</strong>");
            $("#remove_name").val(target.data('filename'));
            $("#remove_type").val(target.data('type'));
        }).on('shown.bs.modal', function (e) {
            $("#remove_dialog .btn-primary").focus();
        });

        $('#rename_dialog').on("show.bs.modal", function (e) {
            var target = $(e.relatedTarget);
            cleanup_dialog($('#rename_dialog'));
            $("#old_name").val(target.data('filename'));
            $("#new_name").val(target.data('name'));
            $("#rename_type").val(target.data('type'));
        }).on('shown.bs.modal', function (e) {
            $("#new_name").focus();
        });

        $('#mkdir_dialog .btn-primary').on("click", function () {
            $('#mkdir_dialog').find('button').prop('disabled', true);
            mkdir($('#new_dir').val());
        });

        $('#remove_dialog .btn-primary').on("click", function () {
            $('#remove_dialog').find('button').prop('disabled', true);
            remove($('#remove_name').val(), $('#remove_type').val());
        });

        $('#rename_dialog .btn-primary').on("click", function () {
            $('#rename_dialog').find('button').prop('disabled', true);
            rename($('#old_name').val(), $('#new_name').val(), $('#rename_type').val());
        });

        refresh_files(window.location.hash.substring(1));
    }

    // status.html
    if ($('#pollm_dns').length) {
        function poll_mdns(first) {
            $.get($.getHttpLocation('/poll_mdns/') + '?SID=' + $.getSessionId() + "&id=" + random_str(), function(html) {
                if (html) {
                    console.log("response "+html);
                    $('#pollm_dns').html(html);
                } else {
                    console.log("empty response, poll again");
                    window.setTimeout(poll_mdns, 1000);
                }
            }).fail(function(data, textStatus, xhr) {
                console.log("response code "+xhr.status);
                $('#pollm_dns').find('td:last').html("Failed to poll MDNS");
            });
        }
        window.setTimeout(function() {
            poll_mdns(true);
        }, 1000);
    }


    // all forms
    if ($.formValidator.validated) {

        var $form = $($.formValidator.form);
        if ($.formValidator.markAsValid) {
            $form.find('select,input').addClass('is-valid').remove('.invalid-feedback');
        }

        for(var i = 0; i < $.formValidator.errors.length; i++) {
            var e = $.formValidator.errors[i];
            $(e.target).removeClass('is-valid').addClass('is-invalid');
            var parent = $(e.target).closest('.input-group');
            if (parent.length == 0) {
                parent = $(e.target).closest('.form-group');
            }
            parent.children().last().after('<div class="invalid-feedback">' + e.error + '</div>')
        }
    }

});
